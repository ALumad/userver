{% import "utils.inc.jinja" as utils %}
{{- utils.do_not_edit() }}
// This file was generated from {{ proto.source_file }}
#pragma once

{% for include in proto.includes_handler_hpp %}
#include {{include}}
{% endfor %}

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#include {{proto.generated_include}}
#pragma clang diagnostic pop

{% call utils.optional_namespace(proto.namespace) %}
{% for service in proto.services %}

// Handler interface for {{service.name}}
class {{service.name}}HandlerBase {
 public:
  using Service = {{service.name}};

  {{service.name}}HandlerBase& operator=({{service.name}}HandlerBase&&) = delete;
  virtual ~{{service.name}}HandlerBase();

  static std::unique_ptr<USERVER_NAMESPACE::server::grpc::Reactor> MakeReactor(
      std::unique_ptr<{{service.name}}HandlerBase> handler,
      ::grpc::ServerCompletionQueue& queue);
  {% for method in service.method %}

  {% if method.client_streaming and method.server_streaming %}
  using {{method.name}}Call =
      USERVER_NAMESPACE::server::grpc::BidirectionalStream<
          {{ method.input_type | grpc_to_cpp_name }},
          {{ method.output_type | grpc_to_cpp_name }}>;
  {% elif method.client_streaming %}
  using {{method.name}}Call =
      USERVER_NAMESPACE::server::grpc::InputStream<
          {{ method.input_type | grpc_to_cpp_name }},
          {{ method.output_type | grpc_to_cpp_name }}>;
  {% elif method.server_streaming %}
  using {{method.name}}Call =
      USERVER_NAMESPACE::server::grpc::OutputStream<
          {{ method.output_type | grpc_to_cpp_name }}>;
  {% else %}
  using {{method.name}}Call =
      USERVER_NAMESPACE::server::grpc::UnaryCall<
          {{ method.output_type | grpc_to_cpp_name }}>;
  {% endif %}

  {% if method.client_streaming %}
  virtual void {{method.name}}({{method.name}}Call& call);
  {% else %}
  virtual void {{method.name}}(
      {{method.name}}Call& call,
      {{ method.input_type | grpc_to_cpp_name }}&& request);
  {% endif %}
  {% endfor %}
};
{% endfor %}
{% endcall %} {# utils.optional_namespace #}
