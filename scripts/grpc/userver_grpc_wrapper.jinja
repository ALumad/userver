/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */
/* This file was generated from {{ proto.source_file }} */
#pragma once

{% for include in proto.includes %}
#include {{include}}
{% endfor %}

namespace {{ proto.namespace }} {

{% for service in proto.services %}
// Client for {{service.name}}
class {{service.name}}Client final : public ::clients::grpc::ServiceClient<{{service.name}}> {
 public:
  using ::clients::grpc::ServiceClient<{{service.name}}>::ServiceClient;
  {% for method in service.method %}

  {% if method.client_streaming and method.server_streaming %}
  using {{method.name}}Result =
        ::clients::grpc::BidirectionalStream<
            {{ method.input_type | grpc_to_cpp_name }},
            {{ method.output_type | grpc_to_cpp_name }}>;
  {% elif method.client_streaming %}
  using {{method.name}}Result =
        ::clients::grpc::OutputStream<
            {{ method.input_type | grpc_to_cpp_name }},
            {{ method.output_type | grpc_to_cpp_name }}>;
  {% elif method.server_streaming %}
  using {{method.name}}Result =
        ::clients::grpc::InputStream<
            {{ method.output_type | grpc_to_cpp_name }}>;
  {% else %}
  using {{method.name}}Result =
        ::clients::grpc::UnaryCall<
            {{ method.output_type | grpc_to_cpp_name }}>;
  {% endif %}
  {{method.name}}Result {{method.name}}(
      {% if not method.client_streaming %}
      const {{ method.input_type | grpc_to_cpp_name }}& request,
      {% endif %}
      std::unique_ptr<::grpc::ClientContext> context =
          std::make_unique<::grpc::ClientContext>()) {
    return {GetStub(), GetQueue(), &StubType::PrepareAsync{{method.name}},
            "{{service.name}}::{{method.name}}",
    {% if method.client_streaming %}
            std::move(context)};
    {% else %}
            std::move(context), request};
    {% endif %}
  }
  {% endfor %}
};
{% endfor %}

}  // namespace {{ proto.namespace }}
