# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (program_options_FOUND)
  return()
endif()

if (TARGET program_options)
  set(program_options_FOUND ON)
  return()
endif()


set(FULL_ERROR_MESSAGE "Could not find `program_options` package.\n\tDebian: sudo apt update && sudo apt install libboost-program-options-dev\n\tMacOS: brew install boost")
if (program_options_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${program_options_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)

find_library(program_options_LIBRARIES_boost_program_options
  NAMES boost_program_options
)
list(APPEND program_options_LIBRARIES ${program_options_LIBRARIES_boost_program_options})

find_path(program_options_INCLUDE_DIRS_boost_program_options_config_hpp
  NAMES boost/program_options/config.hpp
)
list(APPEND program_options_INCLUDE_DIRS ${program_options_INCLUDE_DIRS_boost_program_options_config_hpp})



if (program_options_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libboost-program-options-dev
      OUTPUT_VARIABLE program_options_version_output
      ERROR_VARIABLE program_options_version_error
      RESULT_VARIABLE program_options_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (program_options_version_result EQUAL 0)
      set(program_options_VERSION ${program_options_version_output})
      message(STATUS "Installed version libboost-program-options-dev: ${program_options_VERSION}")
    endif(program_options_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions boost
      OUTPUT_VARIABLE program_options_version_output
      ERROR_VARIABLE program_options_version_error
      RESULT_VARIABLE program_options_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (program_options_version_result EQUAL 0)
      if (program_options_version_output MATCHES "^(.*) (.*)$")
        set(program_options_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version boost: ${program_options_VERSION}")
      else()
        set(program_options_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${program_options_version_error}")
    endif()
  endif()
endif()
 
endif (program_options_FIND_VERSION)

 
find_package_handle_standard_args(
  program_options
    REQUIRED_VARS
      program_options_LIBRARIES
      program_options_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  program_options_LIBRARIES
  program_options_INCLUDE_DIRS
  
)


if (program_options_FIND_VERSION)
  if (program_options_VERSION VERSION_LESS program_options_FIND_VERSION)
      message(STATUS
          "Version of program_options is ${program_options_VERSION}. "
          "Required version is ${program_options_FIND_VERSION}. Ignoring found program_options."
      )
      set(program_options_FOUND OFF)
  endif()
endif()

if (NOT program_options_FOUND)
  if (program_options_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET program_options)
  add_library(program_options INTERFACE IMPORTED GLOBAL)

  if (TARGET Boost::program_options)
    target_link_libraries(program_options INTERFACE Boost::program_options)
  endif()
  target_include_directories(program_options INTERFACE ${program_options_INCLUDE_DIRS})
  target_link_libraries(program_options INTERFACE ${program_options_LIBRARIES})
  
  # Target program_options is created
endif()
