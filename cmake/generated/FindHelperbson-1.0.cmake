# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (bson-1.0_FOUND)
  return()
endif()

if (TARGET bson-1.0)
  set(bson-1.0_FOUND ON)
  return()
endif()

if (NOT bson-1.0_FIND_VERSION OR bson-1.0_FIND_VERSION VERSION_LESS 1.16.0)
    set(bson-1.0_FIND_VERSION 1.16.0)
endif()

set(FULL_ERROR_MESSAGE "Could not find `bson-1.0` package.\n\tDebian: sudo apt update && sudo apt install libyandex-taxi-mongo-c-driver-dev\n\tMacOS: brew install yandex-taxi-mongo-c-driver")
if (bson-1.0_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${bson-1.0_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)





if (bson-1.0_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libyandex-taxi-mongo-c-driver-dev
      OUTPUT_VARIABLE bson-1.0_version_output
      ERROR_VARIABLE bson-1.0_version_error
      RESULT_VARIABLE bson-1.0_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (bson-1.0_version_result EQUAL 0)
      set(bson-1.0_VERSION ${bson-1.0_version_output})
      message(STATUS "Installed version libyandex-taxi-mongo-c-driver-dev: ${bson-1.0_VERSION}")
    endif(bson-1.0_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions yandex-taxi-mongo-c-driver
      OUTPUT_VARIABLE bson-1.0_version_output
      ERROR_VARIABLE bson-1.0_version_error
      RESULT_VARIABLE bson-1.0_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (bson-1.0_version_result EQUAL 0)
      if (bson-1.0_version_output MATCHES "^(.*) (.*)$")
        set(bson-1.0_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version yandex-taxi-mongo-c-driver: ${bson-1.0_VERSION}")
      else()
        set(bson-1.0_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${bson-1.0_version_error}")
    endif()
  endif()
endif()
 
endif (bson-1.0_FIND_VERSION)

find_package(bson-1.0 1.16.0
 )
set(bson-1.0_FOUND ${bson-1.0_FOUND})
 


if (bson-1.0_FIND_VERSION)
  if (bson-1.0_VERSION VERSION_LESS bson-1.0_FIND_VERSION)
      message(STATUS
          "Version of bson-1.0 is ${bson-1.0_VERSION}. "
          "Required version is ${bson-1.0_FIND_VERSION}. Ignoring found bson-1.0."
      )
      set(bson-1.0_FOUND OFF)
  endif()
endif()

if (NOT bson-1.0_FOUND)
  if (bson-1.0_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET bson-1.0)
  add_library(bson-1.0 INTERFACE IMPORTED GLOBAL)

  target_include_directories(bson-1.0 INTERFACE ${bson-1.0_INCLUDE_DIRS})
  target_link_libraries(bson-1.0 INTERFACE ${bson-1.0_LIBRARIES})
  
  # Target bson-1.0 is created
endif()
