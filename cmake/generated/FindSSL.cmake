# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (SSL_FOUND)
  return()
endif()

if (TARGET SSL)
  set(SSL_FOUND ON)
  return()
endif()


set(FULL_ERROR_MESSAGE "Could not find `SSL` package.\n\tDebian: sudo apt update && sudo apt install libssl-dev\n\tMacOS: brew install openssl")
if (SSL_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${SSL_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)





if (SSL_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libssl-dev
      OUTPUT_VARIABLE OpenSSL_version_output
      ERROR_VARIABLE OpenSSL_version_error
      RESULT_VARIABLE OpenSSL_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (OpenSSL_version_result EQUAL 0)
      set(OpenSSL_VERSION ${OpenSSL_version_output})
      message(STATUS "Installed version libssl-dev: ${OpenSSL_VERSION}")
    endif(OpenSSL_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions openssl
      OUTPUT_VARIABLE OpenSSL_version_output
      ERROR_VARIABLE OpenSSL_version_error
      RESULT_VARIABLE OpenSSL_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (OpenSSL_version_result EQUAL 0)
      if (OpenSSL_version_output MATCHES "^(.*) (.*)$")
        set(OpenSSL_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version openssl: ${OpenSSL_VERSION}")
      else()
        set(OpenSSL_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${OpenSSL_version_error}")
    endif()
  endif()
endif()
 
endif (SSL_FIND_VERSION)

find_package(OpenSSL 
    COMPONENTS SSL
 )
set(SSL_FOUND ${OpenSSL_FOUND})
 


if (SSL_FIND_VERSION)
  if (OpenSSL_VERSION VERSION_LESS SSL_FIND_VERSION)
      message(STATUS
          "Version of SSL is ${OpenSSL_VERSION}. "
          "Required version is ${SSL_FIND_VERSION}. Ignoring found SSL."
      )
      set(SSL_FOUND OFF)
  endif()
endif()

if (NOT SSL_FOUND)
  if (SSL_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET SSL)
  add_library(SSL INTERFACE IMPORTED GLOBAL)

  if (TARGET OpenSSL::SSL)
    target_link_libraries(SSL INTERFACE OpenSSL::SSL)
  endif()
  
  # Target SSL is created
endif()
