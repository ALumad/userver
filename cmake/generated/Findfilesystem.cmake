# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (filesystem_FOUND)
  return()
endif()

if (TARGET filesystem)
  set(filesystem_FOUND ON)
  return()
endif()


set(FULL_ERROR_MESSAGE "Could not find `filesystem` package.\n\tDebian: sudo apt update && sudo apt install libboost-filesystem-dev\n\tMacOS: brew install boost")
if (filesystem_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${filesystem_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)

find_library(filesystem_LIBRARIES_boost_filesystem
  NAMES boost_filesystem
)
list(APPEND filesystem_LIBRARIES ${filesystem_LIBRARIES_boost_filesystem})

find_path(filesystem_INCLUDE_DIRS_boost_filesystem_config_hpp
  NAMES boost/filesystem/config.hpp
)
list(APPEND filesystem_INCLUDE_DIRS ${filesystem_INCLUDE_DIRS_boost_filesystem_config_hpp})



if (filesystem_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libboost-filesystem-dev
      OUTPUT_VARIABLE filesystem_version_output
      ERROR_VARIABLE filesystem_version_error
      RESULT_VARIABLE filesystem_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (filesystem_version_result EQUAL 0)
      set(filesystem_VERSION ${filesystem_version_output})
      message(STATUS "Installed version libboost-filesystem-dev: ${filesystem_VERSION}")
    endif(filesystem_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions boost
      OUTPUT_VARIABLE filesystem_version_output
      ERROR_VARIABLE filesystem_version_error
      RESULT_VARIABLE filesystem_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (filesystem_version_result EQUAL 0)
      if (filesystem_version_output MATCHES "^(.*) (.*)$")
        set(filesystem_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version boost: ${filesystem_VERSION}")
      else()
        set(filesystem_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${filesystem_version_error}")
    endif()
  endif()
endif()
 
endif (filesystem_FIND_VERSION)

 
find_package_handle_standard_args(
  filesystem
    REQUIRED_VARS
      filesystem_LIBRARIES
      filesystem_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  filesystem_LIBRARIES
  filesystem_INCLUDE_DIRS
  
)


if (filesystem_FIND_VERSION)
  if (filesystem_VERSION VERSION_LESS filesystem_FIND_VERSION)
      message(STATUS
          "Version of filesystem is ${filesystem_VERSION}. "
          "Required version is ${filesystem_FIND_VERSION}. Ignoring found filesystem."
      )
      set(filesystem_FOUND OFF)
  endif()
endif()

if (NOT filesystem_FOUND)
  if (filesystem_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET filesystem)
  add_library(filesystem INTERFACE IMPORTED GLOBAL)

  if (TARGET Boost::filesystem)
    target_link_libraries(filesystem INTERFACE Boost::filesystem)
  endif()
  target_include_directories(filesystem INTERFACE ${filesystem_INCLUDE_DIRS})
  target_link_libraries(filesystem INTERFACE ${filesystem_LIBRARIES})
  
  # Target filesystem is created
endif()
