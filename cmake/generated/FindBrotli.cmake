# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (Brotli_FOUND)
  return()
endif()

if (TARGET Brotli)
  set(Brotli_FOUND ON)
  return()
endif()


set(FULL_ERROR_MESSAGE "Could not find `Brotli` package.\n\tDebian: sudo apt update && sudo apt install libbrotli-dev\n\tMacOS: brew install brotli")
if (Brotli_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${Brotli_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)

find_library(Brotli_LIBRARIES_brotlidec
  NAMES brotlidec
)
list(APPEND Brotli_LIBRARIES ${Brotli_LIBRARIES_brotlidec})
find_library(Brotli_LIBRARIES_brotlienc
  NAMES brotlienc
)
list(APPEND Brotli_LIBRARIES ${Brotli_LIBRARIES_brotlienc})

find_path(Brotli_INCLUDE_DIRS_brotli_decode_h
  NAMES brotli/decode.h
)
list(APPEND Brotli_INCLUDE_DIRS ${Brotli_INCLUDE_DIRS_brotli_decode_h})
find_path(Brotli_INCLUDE_DIRS_brotli_encode_h
  NAMES brotli/encode.h
)
list(APPEND Brotli_INCLUDE_DIRS ${Brotli_INCLUDE_DIRS_brotli_encode_h})



if (Brotli_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libbrotli-dev
      OUTPUT_VARIABLE Brotli_version_output
      ERROR_VARIABLE Brotli_version_error
      RESULT_VARIABLE Brotli_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (Brotli_version_result EQUAL 0)
      set(Brotli_VERSION ${Brotli_version_output})
      message(STATUS "Installed version libbrotli-dev: ${Brotli_VERSION}")
    endif(Brotli_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions brotli
      OUTPUT_VARIABLE Brotli_version_output
      ERROR_VARIABLE Brotli_version_error
      RESULT_VARIABLE Brotli_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (Brotli_version_result EQUAL 0)
      if (Brotli_version_output MATCHES "^(.*) (.*)$")
        set(Brotli_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version brotli: ${Brotli_VERSION}")
      else()
        set(Brotli_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${Brotli_version_error}")
    endif()
  endif()
endif()
 
endif (Brotli_FIND_VERSION)

 
find_package_handle_standard_args(
  Brotli
    REQUIRED_VARS
      Brotli_LIBRARIES
      Brotli_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  Brotli_LIBRARIES
  Brotli_INCLUDE_DIRS
  
)


if (Brotli_FIND_VERSION)
  if (Brotli_VERSION VERSION_LESS Brotli_FIND_VERSION)
      message(STATUS
          "Version of Brotli is ${Brotli_VERSION}. "
          "Required version is ${Brotli_FIND_VERSION}. Ignoring found Brotli."
      )
      set(Brotli_FOUND OFF)
  endif()
endif()

if (NOT Brotli_FOUND)
  if (Brotli_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET Brotli)
  add_library(Brotli INTERFACE IMPORTED GLOBAL)

  target_include_directories(Brotli INTERFACE ${Brotli_INCLUDE_DIRS})
  target_link_libraries(Brotli INTERFACE ${Brotli_LIBRARIES})
  
  # Target Brotli is created
endif()
