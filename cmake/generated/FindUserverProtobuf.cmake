# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (UserverProtobuf_FOUND)
  return()
endif()

if (TARGET UserverProtobuf)
  set(UserverProtobuf_FOUND ON)
  return()
endif()


set(FULL_ERROR_MESSAGE "Could not find `UserverProtobuf` package.\n\tDebian: sudo apt update && sudo apt install protoc-dev protobuf-compiler python3-protobuf libprotoc-dev\n\tMacOS: brew install protobuf")
if (UserverProtobuf_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${UserverProtobuf_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)

find_library(UserverProtobuf_LIBRARIES_protobuf
  NAMES protobuf
)
list(APPEND UserverProtobuf_LIBRARIES ${UserverProtobuf_LIBRARIES_protobuf})

find_path(UserverProtobuf_INCLUDE_DIRS_google_protobuf_port_def_inc_google_protobuf_compiler_cpp_cpp_generator_h
  NAMES google/protobuf/port_def.inc google/protobuf/compiler/cpp/cpp_generator.h
)
list(APPEND UserverProtobuf_INCLUDE_DIRS ${UserverProtobuf_INCLUDE_DIRS_google_protobuf_port_def_inc_google_protobuf_compiler_cpp_cpp_generator_h})



if (UserverProtobuf_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show protoc-dev
      OUTPUT_VARIABLE UserverProtobuf_version_output
      ERROR_VARIABLE UserverProtobuf_version_error
      RESULT_VARIABLE UserverProtobuf_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (UserverProtobuf_version_result EQUAL 0)
      set(UserverProtobuf_VERSION ${UserverProtobuf_version_output})
      message(STATUS "Installed version protoc-dev: ${UserverProtobuf_VERSION}")
    endif(UserverProtobuf_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions protobuf
      OUTPUT_VARIABLE UserverProtobuf_version_output
      ERROR_VARIABLE UserverProtobuf_version_error
      RESULT_VARIABLE UserverProtobuf_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (UserverProtobuf_version_result EQUAL 0)
      if (UserverProtobuf_version_output MATCHES "^(.*) (.*)$")
        set(UserverProtobuf_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version protobuf: ${UserverProtobuf_VERSION}")
      else()
        set(UserverProtobuf_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${UserverProtobuf_version_error}")
    endif()
  endif()
endif()
 
endif (UserverProtobuf_FIND_VERSION)

 
find_package_handle_standard_args(
  UserverProtobuf
    REQUIRED_VARS
      UserverProtobuf_LIBRARIES
      UserverProtobuf_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  UserverProtobuf_LIBRARIES
  UserverProtobuf_INCLUDE_DIRS
  
)


if (UserverProtobuf_FIND_VERSION)
  if (UserverProtobuf_VERSION VERSION_LESS UserverProtobuf_FIND_VERSION)
      message(STATUS
          "Version of UserverProtobuf is ${UserverProtobuf_VERSION}. "
          "Required version is ${UserverProtobuf_FIND_VERSION}. Ignoring found UserverProtobuf."
      )
      set(UserverProtobuf_FOUND OFF)
  endif()
endif()

if (NOT UserverProtobuf_FOUND)
  if (UserverProtobuf_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET UserverProtobuf)
  add_library(UserverProtobuf INTERFACE IMPORTED GLOBAL)

  target_include_directories(UserverProtobuf INTERFACE ${UserverProtobuf_INCLUDE_DIRS})
  target_link_libraries(UserverProtobuf INTERFACE ${UserverProtobuf_LIBRARIES})
  
  # Target UserverProtobuf is created
endif()
