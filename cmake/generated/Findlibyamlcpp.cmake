# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (TARGET libyamlcpp)
  if (NOT libyamlcpp_FIND_VERSION)
      set(libyamlcpp_FOUND ON)
      return()
  endif()

  if (libyamlcpp_VERSION)
      if (libyamlcpp_FIND_VERSION VERSION_LESS_EQUAL libyamlcpp_VERSION)
          set(libyamlcpp_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${libyamlcpp_VERSION} "
              "of libyamlcpp when version ${libyamlcpp_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `libyamlcpp` package.\n\tDebian: sudo apt update && sudo apt install libyaml-cpp-dev\n\tMacOS: brew install yaml-cpp")


include(FindPackageHandleStandardArgs)

find_library(libyamlcpp_LIBRARIES_yaml-cpp
  NAMES yaml-cpp
  PATH_SUFFIXES lib
)
list(APPEND libyamlcpp_LIBRARIES ${libyamlcpp_LIBRARIES_yaml-cpp})

find_path(libyamlcpp_INCLUDE_DIRS_yaml-cpp_yaml_h_yaml-cpp_node_h
  NAMES yaml-cpp/yaml.h yaml-cpp/node.h
  PATH_SUFFIXES include
)
list(APPEND libyamlcpp_INCLUDE_DIRS ${libyamlcpp_INCLUDE_DIRS_yaml-cpp_yaml_h_yaml-cpp_node_h})



if (libyamlcpp_VERSION)
  set(libyamlcpp_VERSION ${libyamlcpp_VERSION})
endif()

if (libyamlcpp_FIND_VERSION AND NOT libyamlcpp_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libyaml-cpp-dev
      OUTPUT_VARIABLE libyamlcpp_version_output
      ERROR_VARIABLE libyamlcpp_version_error
      RESULT_VARIABLE libyamlcpp_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (libyamlcpp_version_result EQUAL 0)
      set(libyamlcpp_VERSION ${libyamlcpp_version_output})
      message(STATUS "Installed version libyaml-cpp-dev: ${libyamlcpp_VERSION}")
    endif(libyamlcpp_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions yaml-cpp
      OUTPUT_VARIABLE libyamlcpp_version_output
      ERROR_VARIABLE libyamlcpp_version_error
      RESULT_VARIABLE libyamlcpp_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (libyamlcpp_version_result EQUAL 0)
      if (libyamlcpp_version_output MATCHES "^(.*) (.*)$")
        set(libyamlcpp_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version yaml-cpp: ${libyamlcpp_VERSION}")
      else()
        set(libyamlcpp_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${libyamlcpp_version_error}")
    endif()
  endif()
endif()
 
endif (libyamlcpp_FIND_VERSION AND NOT libyamlcpp_VERSION)

 
find_package_handle_standard_args(
  libyamlcpp
    REQUIRED_VARS
      libyamlcpp_LIBRARIES
      libyamlcpp_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  libyamlcpp_LIBRARIES
  libyamlcpp_INCLUDE_DIRS
  
)

if (NOT libyamlcpp_FOUND)
  if (libyamlcpp_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${libyamlcpp_FIND_VERSION}")
  endif()

  return()
endif()

if (libyamlcpp_FIND_VERSION)
  if (libyamlcpp_VERSION VERSION_LESS libyamlcpp_FIND_VERSION)
      message(STATUS
          "Version of libyamlcpp is '${libyamlcpp_VERSION}'. "
          "Required version is at least '${libyamlcpp_FIND_VERSION}'. "
          "Ignoring found libyamlcpp."
      )
      set(libyamlcpp_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET libyamlcpp)
  add_library(libyamlcpp INTERFACE IMPORTED GLOBAL)

  target_include_directories(libyamlcpp INTERFACE ${libyamlcpp_INCLUDE_DIRS})
  target_link_libraries(libyamlcpp INTERFACE ${libyamlcpp_LIBRARIES})
  
  # Target libyamlcpp is created
endif()

if (libyamlcpp_VERSION)
  set(libyamlcpp_VERSION "${libyamlcpp_VERSION}" CACHE STRING "Version of the libyamlcpp")
endif()
