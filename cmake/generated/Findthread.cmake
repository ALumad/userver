# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (TARGET thread)
  if (NOT thread_FIND_VERSION)
      set(thread_FOUND ON)
      return()
  endif()

  if (thread_VERSION)
      if (thread_FIND_VERSION VERSION_LESS_EQUAL thread_VERSION)
          set(thread_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${thread_VERSION} "
              "of thread when version ${thread_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `thread` package.\n\tDebian: sudo apt update && sudo apt install libboost-thread-dev\n\tMacOS: brew install boost")


include(FindPackageHandleStandardArgs)

find_library(thread_LIBRARIES_boost_thread
  NAMES boost_thread
)
list(APPEND thread_LIBRARIES ${thread_LIBRARIES_boost_thread})

find_path(thread_INCLUDE_DIRS_boost_thread_mutex_hpp
  NAMES boost/thread/mutex.hpp
)
list(APPEND thread_INCLUDE_DIRS ${thread_INCLUDE_DIRS_boost_thread_mutex_hpp})



if (thread_VERSION)
  set(thread_VERSION ${thread_VERSION})
endif()

if (thread_FIND_VERSION AND NOT thread_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libboost-thread-dev
      OUTPUT_VARIABLE thread_version_output
      ERROR_VARIABLE thread_version_error
      RESULT_VARIABLE thread_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (thread_version_result EQUAL 0)
      set(thread_VERSION ${thread_version_output})
      message(STATUS "Installed version libboost-thread-dev: ${thread_VERSION}")
    endif(thread_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions boost
      OUTPUT_VARIABLE thread_version_output
      ERROR_VARIABLE thread_version_error
      RESULT_VARIABLE thread_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (thread_version_result EQUAL 0)
      if (thread_version_output MATCHES "^(.*) (.*)$")
        set(thread_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version boost: ${thread_VERSION}")
      else()
        set(thread_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${thread_version_error}")
    endif()
  endif()
endif()
 
endif (thread_FIND_VERSION AND NOT thread_VERSION)

 
find_package_handle_standard_args(
  thread
    REQUIRED_VARS
      thread_LIBRARIES
      thread_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  thread_LIBRARIES
  thread_INCLUDE_DIRS
  
)

if (NOT thread_FOUND)
  if (thread_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${thread_FIND_VERSION}")
  endif()

  return()
endif()

if (thread_FIND_VERSION)
  if (thread_VERSION VERSION_LESS thread_FIND_VERSION)
      message(STATUS
          "Version of thread is '${thread_VERSION}'. "
          "Required version is at least '${thread_FIND_VERSION}'. "
          "Ignoring found thread."
      )
      set(thread_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET thread)
  add_library(thread INTERFACE IMPORTED GLOBAL)

  if (TARGET Boost::thread)
    target_link_libraries(thread INTERFACE Boost::thread)
  endif()
  target_include_directories(thread INTERFACE ${thread_INCLUDE_DIRS})
  target_link_libraries(thread INTERFACE ${thread_LIBRARIES})
  
  # Target thread is created
endif()

if (thread_VERSION)
  set(thread_VERSION "${thread_VERSION}" CACHE STRING "Version of the thread")
endif()
