# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (Fmt_FOUND)
  return()
endif()

if (TARGET Fmt)
  set(Fmt_FOUND ON)
  return()
endif()

if (NOT Fmt_FIND_VERSION OR Fmt_FIND_VERSION VERSION_LESS 7.1)
    set(Fmt_FIND_VERSION 7.1)
endif()

set(FULL_ERROR_MESSAGE "Could not find `Fmt` package.\n\tDebian: sudo apt update && sudo apt install libfmt-dev\n\tMacOS: brew install fmt")
if (Fmt_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${Fmt_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)

find_library(Fmt_LIBRARIES_fmt
  NAMES fmt
)
list(APPEND Fmt_LIBRARIES ${Fmt_LIBRARIES_fmt})

find_path(Fmt_INCLUDE_DIRS_fmt_format_h
  NAMES fmt/format.h
)
list(APPEND Fmt_INCLUDE_DIRS ${Fmt_INCLUDE_DIRS_fmt_format_h})



if (Fmt_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libfmt-dev
      OUTPUT_VARIABLE Fmt_version_output
      ERROR_VARIABLE Fmt_version_error
      RESULT_VARIABLE Fmt_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (Fmt_version_result EQUAL 0)
      set(Fmt_VERSION ${Fmt_version_output})
      message(STATUS "Installed version libfmt-dev: ${Fmt_VERSION}")
    endif(Fmt_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions fmt
      OUTPUT_VARIABLE Fmt_version_output
      ERROR_VARIABLE Fmt_version_error
      RESULT_VARIABLE Fmt_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (Fmt_version_result EQUAL 0)
      if (Fmt_version_output MATCHES "^(.*) (.*)$")
        set(Fmt_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version fmt: ${Fmt_VERSION}")
      else()
        set(Fmt_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${Fmt_version_error}")
    endif()
  endif()
endif()
 
endif (Fmt_FIND_VERSION)

 
find_package_handle_standard_args(
  Fmt
    REQUIRED_VARS
      Fmt_LIBRARIES
      Fmt_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  Fmt_LIBRARIES
  Fmt_INCLUDE_DIRS
  
)


if (Fmt_FIND_VERSION)
  if (Fmt_VERSION VERSION_LESS Fmt_FIND_VERSION)
      message(STATUS
          "Version of Fmt is ${Fmt_VERSION}. "
          "Required version is ${Fmt_FIND_VERSION}. Ignoring found Fmt."
      )
      set(Fmt_FOUND OFF)
  endif()
endif()

if (NOT Fmt_FOUND)
  if (Fmt_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET Fmt)
  add_library(Fmt INTERFACE IMPORTED GLOBAL)

  target_include_directories(Fmt INTERFACE ${Fmt_INCLUDE_DIRS})
  target_link_libraries(Fmt INTERFACE ${Fmt_LIBRARIES})
  
  # Target Fmt is created
endif()
