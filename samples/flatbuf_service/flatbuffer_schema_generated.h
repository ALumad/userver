// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATBUFFERSCHEMA_SAMPLES_FBS_H_
#define FLATBUFFERS_GENERATED_FLATBUFFERSCHEMA_SAMPLES_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace samples {
namespace fbs {

struct Misc;
struct MiscBuilder;
struct MiscT;

struct SampleRequest;
struct SampleRequestBuilder;
struct SampleRequestT;

struct SampleResponse;
struct SampleResponseBuilder;
struct SampleResponseT;

struct MiscT : public flatbuffers::NativeTable {
  typedef Misc TableType;
  MiscT() {
  }
};

struct Misc FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MiscT NativeTableType;
  typedef MiscBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  MiscT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MiscT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Misc> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MiscT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MiscBuilder {
  typedef Misc Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit MiscBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MiscBuilder &operator=(const MiscBuilder &);
  flatbuffers::Offset<Misc> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Misc>(end);
    return o;
  }
};

inline flatbuffers::Offset<Misc> CreateMisc(
    flatbuffers::FlatBufferBuilder &_fbb) {
  MiscBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<Misc> CreateMisc(flatbuffers::FlatBufferBuilder &_fbb, const MiscT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SampleRequestT : public flatbuffers::NativeTable {
  typedef SampleRequest TableType;
  bool return_error;
  int64_t arg1;
  int64_t arg2;
  std::string data;
  std::unique_ptr<samples::fbs::MiscT> misc;
  SampleRequestT()
      : return_error(false),
        arg1(0),
        arg2(0) {
  }
};

struct SampleRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SampleRequestT NativeTableType;
  typedef SampleRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RETURN_ERROR = 4,
    VT_ARG1 = 6,
    VT_ARG2 = 8,
    VT_DATA = 10,
    VT_MISC = 12
  };
  bool return_error() const {
    return GetField<uint8_t>(VT_RETURN_ERROR, 0) != 0;
  }
  int64_t arg1() const {
    return GetField<int64_t>(VT_ARG1, 0);
  }
  int64_t arg2() const {
    return GetField<int64_t>(VT_ARG2, 0);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  const samples::fbs::Misc *misc() const {
    return GetPointer<const samples::fbs::Misc *>(VT_MISC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_RETURN_ERROR) &&
           VerifyField<int64_t>(verifier, VT_ARG1) &&
           VerifyField<int64_t>(verifier, VT_ARG2) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           VerifyOffset(verifier, VT_MISC) &&
           verifier.VerifyTable(misc()) &&
           verifier.EndTable();
  }
  SampleRequestT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SampleRequestT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SampleRequest> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SampleRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SampleRequestBuilder {
  typedef SampleRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_return_error(bool return_error) {
    fbb_.AddElement<uint8_t>(SampleRequest::VT_RETURN_ERROR, static_cast<uint8_t>(return_error), 0);
  }
  void add_arg1(int64_t arg1) {
    fbb_.AddElement<int64_t>(SampleRequest::VT_ARG1, arg1, 0);
  }
  void add_arg2(int64_t arg2) {
    fbb_.AddElement<int64_t>(SampleRequest::VT_ARG2, arg2, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(SampleRequest::VT_DATA, data);
  }
  void add_misc(flatbuffers::Offset<samples::fbs::Misc> misc) {
    fbb_.AddOffset(SampleRequest::VT_MISC, misc);
  }
  explicit SampleRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SampleRequestBuilder &operator=(const SampleRequestBuilder &);
  flatbuffers::Offset<SampleRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SampleRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<SampleRequest> CreateSampleRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool return_error = false,
    int64_t arg1 = 0,
    int64_t arg2 = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0,
    flatbuffers::Offset<samples::fbs::Misc> misc = 0) {
  SampleRequestBuilder builder_(_fbb);
  builder_.add_arg2(arg2);
  builder_.add_arg1(arg1);
  builder_.add_misc(misc);
  builder_.add_data(data);
  builder_.add_return_error(return_error);
  return builder_.Finish();
}

inline flatbuffers::Offset<SampleRequest> CreateSampleRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool return_error = false,
    int64_t arg1 = 0,
    int64_t arg2 = 0,
    const char *data = nullptr,
    flatbuffers::Offset<samples::fbs::Misc> misc = 0) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return samples::fbs::CreateSampleRequest(
      _fbb,
      return_error,
      arg1,
      arg2,
      data__,
      misc);
}

flatbuffers::Offset<SampleRequest> CreateSampleRequest(flatbuffers::FlatBufferBuilder &_fbb, const SampleRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SampleResponseT : public flatbuffers::NativeTable {
  typedef SampleResponse TableType;
  int64_t sum;
  std::string echo;
  SampleResponseT()
      : sum(0) {
  }
};

struct SampleResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SampleResponseT NativeTableType;
  typedef SampleResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUM = 4,
    VT_ECHO = 6
  };
  int64_t sum() const {
    return GetField<int64_t>(VT_SUM, 0);
  }
  const flatbuffers::String *echo() const {
    return GetPointer<const flatbuffers::String *>(VT_ECHO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SUM) &&
           VerifyOffset(verifier, VT_ECHO) &&
           verifier.VerifyString(echo()) &&
           verifier.EndTable();
  }
  SampleResponseT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SampleResponseT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SampleResponse> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SampleResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SampleResponseBuilder {
  typedef SampleResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sum(int64_t sum) {
    fbb_.AddElement<int64_t>(SampleResponse::VT_SUM, sum, 0);
  }
  void add_echo(flatbuffers::Offset<flatbuffers::String> echo) {
    fbb_.AddOffset(SampleResponse::VT_ECHO, echo);
  }
  explicit SampleResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SampleResponseBuilder &operator=(const SampleResponseBuilder &);
  flatbuffers::Offset<SampleResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SampleResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<SampleResponse> CreateSampleResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t sum = 0,
    flatbuffers::Offset<flatbuffers::String> echo = 0) {
  SampleResponseBuilder builder_(_fbb);
  builder_.add_sum(sum);
  builder_.add_echo(echo);
  return builder_.Finish();
}

inline flatbuffers::Offset<SampleResponse> CreateSampleResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t sum = 0,
    const char *echo = nullptr) {
  auto echo__ = echo ? _fbb.CreateString(echo) : 0;
  return samples::fbs::CreateSampleResponse(
      _fbb,
      sum,
      echo__);
}

flatbuffers::Offset<SampleResponse> CreateSampleResponse(flatbuffers::FlatBufferBuilder &_fbb, const SampleResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MiscT *Misc::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<samples::fbs::MiscT> _o = std::unique_ptr<samples::fbs::MiscT>(new MiscT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Misc::UnPackTo(MiscT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<Misc> Misc::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MiscT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMisc(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Misc> CreateMisc(flatbuffers::FlatBufferBuilder &_fbb, const MiscT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MiscT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return samples::fbs::CreateMisc(
      _fbb);
}

inline SampleRequestT *SampleRequest::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<samples::fbs::SampleRequestT> _o = std::unique_ptr<samples::fbs::SampleRequestT>(new SampleRequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SampleRequest::UnPackTo(SampleRequestT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = return_error(); _o->return_error = _e; }
  { auto _e = arg1(); _o->arg1 = _e; }
  { auto _e = arg2(); _o->arg2 = _e; }
  { auto _e = data(); if (_e) _o->data = _e->str(); }
  { auto _e = misc(); if (_e) _o->misc = std::unique_ptr<samples::fbs::MiscT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<SampleRequest> SampleRequest::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SampleRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSampleRequest(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SampleRequest> CreateSampleRequest(flatbuffers::FlatBufferBuilder &_fbb, const SampleRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SampleRequestT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _return_error = _o->return_error;
  auto _arg1 = _o->arg1;
  auto _arg2 = _o->arg2;
  auto _data = _o->data.empty() ? 0 : _fbb.CreateString(_o->data);
  auto _misc = _o->misc ? CreateMisc(_fbb, _o->misc.get(), _rehasher) : 0;
  return samples::fbs::CreateSampleRequest(
      _fbb,
      _return_error,
      _arg1,
      _arg2,
      _data,
      _misc);
}

inline SampleResponseT *SampleResponse::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<samples::fbs::SampleResponseT> _o = std::unique_ptr<samples::fbs::SampleResponseT>(new SampleResponseT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SampleResponse::UnPackTo(SampleResponseT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = sum(); _o->sum = _e; }
  { auto _e = echo(); if (_e) _o->echo = _e->str(); }
}

inline flatbuffers::Offset<SampleResponse> SampleResponse::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SampleResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSampleResponse(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SampleResponse> CreateSampleResponse(flatbuffers::FlatBufferBuilder &_fbb, const SampleResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SampleResponseT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _sum = _o->sum;
  auto _echo = _o->echo.empty() ? 0 : _fbb.CreateString(_o->echo);
  return samples::fbs::CreateSampleResponse(
      _fbb,
      _sum,
      _echo);
}

}  // namespace fbs
}  // namespace samples

#endif  // FLATBUFFERS_GENERATED_FLATBUFFERSCHEMA_SAMPLES_FBS_H_
