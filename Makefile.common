# NOTE: use Makefile.local for customization
-include Makefile.local

KERNEL := $(shell uname -s)
ifeq ($(KERNEL),Darwin)
  -include Makefile.macos
  -include userver/Makefile.macos
endif

LTO_CACHE_FOLDER ?= $(HOME)/.ltocache
ifneq ($(LTO_CACHE_FOLDER),)
	CMAKE_OPTS += -DLTO_CACHE_FOLDER=$(LTO_CACHE_FOLDER)
endif
BUILD_TYPE ?= Release
BUILD_DIR ?= build
DOCS_DIR ?= docs
CMAKE_DIR = $(CURDIR)
ifeq ($(origin CC),default)
  CC := clang-7
endif
ifeq ($(origin CXX),default)
  CXX := clang++-7
endif
export CC CXX
SCAN_BUILD = scan-build-7
SCAN_BUILD_OPTS = --force-analyze-debug-code --show-description --use-cc $(CC) --use-c++ $(CXX) -stats -o $(PWD)/static-analyzer-report/
BUILD_CHECK_DIR ?= build-check
PYTHON3_PATH = $(firstword $(wildcard /usr/lib/yandex/taxi-py3/bin/python3) python3)

ifeq ($(CXX),clang++-7)
ifeq ($(shell which llvm-symbolizer),)
  export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-7/bin/llvm-symbolizer
  export UBSAN_SYMBOLIZER_PATH=/usr/lib/llvm-7/bin/llvm-symbolizer
endif
endif

export UBSAN_OPTIONS=print_stacktrace=1

# ASAN/clang has a bug for odr=2, use =1
ASAN_OPTIONS=detect_odr_violation=1

ifndef NPROCS
  ifeq ($(KERNEL),Linux)
    NPROCS := $(shell nproc --all)
  else ifeq ($(KERNEL),Darwin)
    NPROCS := $(shell sysctl -n hw.ncpu)
  else
    $(warning Cannot determine CPU count for $(KERNEL), falling back to 1)
    NPROCS := 1
  endif
endif # NPROCS
export NPROCS

.PHONY: all
all: build

.PHONY: init
init: cmake

.PHONY: cmake
cmake: $(BUILD_DIR)/Makefile

$(BUILD_DIR)/Makefile:
	@echo "Makefile: CC = ${CC} CXX = ${CXX}"
	@mkdir -p $(BUILD_DIR)
	@cd $(BUILD_DIR) && \
      cmake -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMAKE_OPTS) $(CMAKE_DIR)

.PHONY: build
build: build-all

build-%: init
	$(MAKE) -j$(NPROCS) -C $(BUILD_DIR) $*

.PHONY: build-with-asan
build-with-asan: cmake
	@cd $(BUILD_DIR) && cmake -DSANITIZE="addr" $(CMAKE_DIR)
	@$(MAKE) all

.PHONY: build-with-ubsan
build-with-ubsan: cmake
	@cd $(BUILD_DIR) && cmake -DSANITIZE="ub" $(CMAKE_DIR)
	@$(MAKE) all

.PHONY: clang-static-analyzer
clang-static-analyzer:
	mkdir -p $(BUILD_CHECK_DIR)
	cd $(BUILD_CHECK_DIR) && $(SCAN_BUILD) $(SCAN_BUILD_OPTS) cmake .. && $(SCAN_BUILD) $(SCAN_BUILD_OPTS) $(MAKE) -j$(NPROCS)

.PHONY: cppcheck
cppcheck: $(BUILD_DIR)/Makefile
	cd $(BUILD_DIR) && $(MAKE) -j$(NPROCS) cppcheck

.PHONY: test
test:
	@$(MAKE) BUILD_TYPE=Debug build
	@cd $(BUILD_DIR) && ctest -V

.PHONY: utest
utest:
	@$(MAKE) BUILD_TYPE=Debug build
	@cd $(BUILD_DIR) && ctest -V -R '_unittest$$'

.PHONY: clang-format
clang-format:
	@tools/smart-clang-format.sh --all

.PHONY: smart-clang-format
smart-clang-format:
	@tools/smart-clang-format.sh

.PHONY: clang-tidy
clang-tidy:
	@tools/run-clang-tidy-7 -header-filter="/(core|mongo|postgresql|redis).*" -q -j$(NPROCS)

.PHONY: check-pep8
check-pep8:
	@scripts/flake8.sh

.PHONY: smart-check-pep8
smart-check-pep8:
	@scripts/flake8.sh --smart

.PHONY: docs
docs:
	@(cat doxygen.conf; echo OUTPUT_DIRECTORY=$(DOCS_DIR)) | doxygen -

.PHONY: clean-lto-cache
clean-lto-cache:
	@rm -rf $(LTO_CACHE_FOLDER)
