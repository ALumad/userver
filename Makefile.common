USERVER_ROOTDIR := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))

# NOTE: use Makefile.local for customization
-include $(USERVER_ROOTDIR)/Makefile.local

KERNEL := $(shell uname -s)
ifeq ($(KERNEL),Darwin)
  -include Makefile.macos
  -include userver/Makefile.macos
endif

# CMAKE_OPTS is publicly available and can be specified on command line.
# In this case it will override all modifications we're trying to apply here.
# Cannot use `override` here as we need to pass values to sub-makes.
# Copy the original value to our own variable and work with it instead.
export CMAKE_OPTS_INTERNAL ?= $(CMAKE_OPTS)

LTO_CACHE_FOLDER ?= $(HOME)/.ltocache
ifneq ($(LTO_CACHE_FOLDER),)
  ifeq ($(findstring LTO_CACHE_FOLDER=,$(CMAKE_OPTS_INTERNAL)),)
    CMAKE_OPTS_INTERNAL += -DLTO_CACHE_FOLDER=$(LTO_CACHE_FOLDER)
  endif
endif
BUILD_TYPE ?= Debug
BUILD_DIR ?= build
DOCS_DIR ?= docs
CMAKE_DIR = $(CURDIR)
ifeq ($(origin CC),default)
  CC := clang-9
endif
ifeq ($(origin CXX),default)
  CXX := clang++-9
endif
export CC CXX
SCAN_BUILD = scan-build-9
SCAN_BUILD_OPTS = --force-analyze-debug-code --show-description --use-cc $(CC) --use-c++ $(CXX) -stats -o $(PWD)/static-analyzer-report/
BUILD_CHECK_DIR ?= build-check
PYTHON3_BIN_DIR = $(wildcard /usr/lib/yandex/taxi-py3-2/bin/)
CLANG_TIDY_BINARY ?= clang-tidy-9
CHANGED_DIRS ?= $(CMAKE_DIR)
TEAMCITY_LINT_JOBS_COUNT ?= 10
FORMATTERS = black eolfmt jsonfmt yamlfmt

ifeq ($(CXX),clang++-9)
ifeq ($(shell which llvm-symbolizer),)
  export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-9/bin/llvm-symbolizer
  export UBSAN_SYMBOLIZER_PATH=/usr/lib/llvm-9/bin/llvm-symbolizer
endif
endif

export UBSAN_OPTIONS=print_stacktrace=1

# ASAN/clang has a bug for odr=2, use =1
ASAN_OPTIONS=detect_odr_violation=1

ifndef NPROCS
  ifeq ($(KERNEL),Linux)
    NPROCS := $(shell nproc --all)
  else ifeq ($(KERNEL),Darwin)
    NPROCS := $(shell sysctl -n hw.ncpu)
  else
    $(warning Cannot determine CPU count for $(KERNEL), falling back to 1)
    NPROCS := 1
  endif
endif # NPROCS
export NPROCS

.PHONY: all
all: build

.PHONY: init
init: cmake

.PHONY: cmake
cmake: $(BUILD_DIR)/Makefile

$(BUILD_DIR)/Makefile:
	@echo "Makefile: CC = ${CC} CXX = ${CXX}"
	@mkdir -p $(BUILD_DIR)
	@cd $(BUILD_DIR) && \
      cmake -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMAKE_OPTS_INTERNAL) $(CMAKE_DIR)

.PHONY: build
build: cmake
	$(MAKE) -j$(NPROCS) -C $(BUILD_DIR) all

build-yandex-taxi-%: cmake
	$(MAKE) -j$(NPROCS) -C $(BUILD_DIR) yandex-taxi-$*

# Checks cmake cache for variable value and reruns it when necessary.
# (Lists current cmake variable values and greps the required ones.
#  If any of the values is not present, cmake is forcibly rerun.)
# $(1) -- variable name
# $(2) -- values list
ensure-cmake-var-values = ( \
  cd $(BUILD_DIR) \
  && cmake -N -L $(CMAKE_DIR) | grep '^$(1):.*=' | cut -d= -f2 \
    $(foreach value,$(wordlist 2,$(words $(2)),$(2)),| grep $(value)) \
    | grep -q $(firstword $(2)) \
) || $(eval CMAKE_OPTS_INTERNAL += -DSANITIZE="$(2)") $(MAKE) -B cmake

.PHONY: build-with-asan
build-with-asan:
	$(call ensure-cmake-var-values,SANITIZE,addr)
	@$(MAKE) all

.PHONY: build-with-ubsan
build-with-ubsan:
	$(call ensure-cmake-var-values,SANITIZE,ub)
	@$(MAKE) all

.PHONY: build-with-sanitizers
build-with-sanitizers:
	$(call ensure-cmake-var-values,SANITIZE,addr ub)
	@$(MAKE) all

.PHONY: clang-static-analyzer
clang-static-analyzer:
	mkdir -p $(BUILD_CHECK_DIR)
	cd $(BUILD_CHECK_DIR) && $(SCAN_BUILD) $(SCAN_BUILD_OPTS) cmake .. && $(SCAN_BUILD) $(SCAN_BUILD_OPTS) $(MAKE) -j$(NPROCS)

.PHONY: cppcheck
cppcheck: $(BUILD_DIR)/Makefile
	cd $(BUILD_DIR) && $(MAKE) -j$(NPROCS) cppcheck

.PHONY: test
test:
	@$(MAKE) build
	@cd $(BUILD_DIR) && ctest -V

.PHONY: utest
utest:
	@$(MAKE) build
	@cd $(BUILD_DIR) && ctest -V -R '_unittest$$'

.PHONY: clang-tidy
clang-tidy: cmake
	@tools/run-clang-tidy -clang-tidy-binary $(CLANG_TIDY_BINARY)  -p $(BUILD_DIR) -q -j$(NPROCS)

.PHONY: teamcity-clang-tidy
teamcity-clang-tidy: cmake
	@tools/run-clang-tidy -enable-teamcity -clang-tidy-binary $(CLANG_TIDY_BINARY)  -p $(BUILD_DIR) -q -j$(NPROCS)

.PHONY: check-pep8
check-pep8:
	@${PYTHON3_BIN_DIR}check-pep8 --watchers $(CMAKE_DIR)

.PHONY: smart-check-pep8
smart-check-pep8:
	@${PYTHON3_BIN_DIR}check-pep8 --watchers --smart $(CMAKE_DIR)

.PHONY: teamcity-check-pep8
teamcity-check-pep8:
	@${PYTHON3_BIN_DIR}check-pep8 --teamcity --jobs=$(TEAMCITY_LINT_JOBS_COUNT) -- $(CHANGED_DIRS) $(EXTRA_LINT_CHECK)

.PHONY: format
format:
ifneq ($(shell which taxi-clang-format),)
	@taxi-format .
else
	@echo "Formatting... (There is new version of code-linters, please install: https://github.yandex-team.ru/taxi/code-linters#установка)"
	@$(MAKE) -s $(foreach fmt,$(FORMATTERS),taxi-$(fmt)) clang-format
endif

.PHONY: smart-format
smart-format:
ifneq ($(shell which taxi-clang-format),)
	@taxi-format --smart .
else
	@echo "Formatting... (There is new version of code-linters, please install: https://github.yandex-team.ru/taxi/code-linters#установка)"
	@$(MAKE) -s $(foreach fmt,$(FORMATTERS),smart-taxi-$(fmt)) smart-clang-format
endif

.PHONY: teamcity-format
teamcity-format:
	@taxi-format --teamcity --jobs=$(TEAMCITY_LINT_JOBS_COUNT) -- $(CHANGED_DIRS) $(EXTRA_LINT_CHECK)

# legacy
$(foreach fmt,$(FORMATTERS),taxi-$(fmt)): taxi-%:
	@taxi-$* -- .

$(foreach fmt,$(FORMATTERS),smart-taxi-$(fmt)): smart-taxi-%:
	@taxi-$* --smart -- .

.PHONY: clang-format
clang-format:
	@tools/smart-clang-format.sh --all

.PHONY: smart-clang-format
smart-clang-format:
	@tools/smart-clang-format.sh


.PHONY: docs
docs:
	@(cat doxygen.conf; echo OUTPUT_DIRECTORY=$(DOCS_DIR)) | doxygen -

.PHONY: clean-lto-cache
clean-lto-cache:
	@rm -rf $(LTO_CACHE_FOLDER)
