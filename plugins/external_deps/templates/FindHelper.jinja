# AUTOGENERATED, DON'T CHANGE THIS FILE!
{% set libraries_variable = libraries.variable|default('%s_LIBRARIES'|format(name)) %}
{% set includes_variable = includes.variable|default('%s_INCLUDE_DIRS'|format(name)) %}
{% set programs_variable = programs.variable|default('%s_EXECUTABLE'|format(name)) %}
{% set programs_enabled = programs and programs.enabled|default(true) %}

{% macro cmake_find(type, variable, values) %}
{% if values.find|default(false) %}
{% for value in values.find %}
find_{{ type }}({{ variable }}_{{ value.names|join('_')|replace('/', '_')|replace('.', '_') }} NAMES
  {{ value.names|join(' ') }}
{% if value['path-suffixes'] %}
    PATH_SUFFIXES
      {{ value['path-suffixes']|join(' ') }}
{% endif %} {# if value['path-suffixes'] #}
)
list(APPEND {{ variable }} 
  {{ '${' }}{{ variable }}_{{ value.names|join('_')|replace('/', '_')|replace('.', '_') }}{{ '}'}}
)
{% endfor %} {# for value in values.find #}
{% endif %} {# values.find|default(false) #}
{% endmacro %} {# macro cmake_find(type, variable, value) #}

{% if checks %}
{% for check in checks %}
if({{ check.expression }})
  message(FATAL_ERROR "{{ check.error }}")
endif({{ check.expression }})
{% endfor %} {# for check in checks #}
{% endif %} {# if checks #}

{% if not virtual %}

include(FindPackageHandleStandardArgs)

{{ cmake_find('library', libraries_variable, libraries) }}
{{ cmake_find('path', includes_variable, includes) }}
{{ cmake_find('program', programs_variable, programs) }}

{% if not libraries.find|default(false) and not includes.find|default(false) and not programs.find|default(false) %}
find_package({{ package_name or name }} {{ version or '' }} QUIET)
{% endif %} {# if not libraries.find.names|default(false) and not includes.names|default(false) #}

find_package_handle_standard_args(
  {{ package_name or name }}
    REQUIRED_VARS
      {{ libraries_variable if libraries.enabled|default(true) else '' }}
      {{ includes_variable if includes.enabled|default(true) else '' }}
      {{ programs_variable if programs_enabled else '' }}
)
mark_as_advanced(
  {{ libraries_variable if libraries.enabled|default(true) else '' }}
  {{ includes_variable if includes.enabled|default(true) else '' }}
  {{ programs_variable if programs_enabled else '' }}
)

if(NOT {{ package_name or name }}_FOUND)
{% if fail_message %}
  message(FATAL_ERROR "{{ fail_message|trim }} {{ 'Version: {}'.format(version) if version else '' }}")
{% else %}
  message(FATAL_ERROR 
    "Could not find `{{ name }}` package."
{% if debian_names %}
    " Debian: sudo apt update && sudo apt install {{ ' '.join(debian_names) }}"
{% endif %} {# if debian_names #}
{% if formula_name %}
    " MacOS: brew install {{ formula_name }}"
{% endif %} {# if formula_name #}
{% if version %}
    " {{ 'Version: {}'.format(version) }}"
{% endif %} {# if version #}
  )
{% endif %} {# if fail_message #}
endif(NOT {{ package_name or name }}_FOUND)

{% endif %} {# if not virtual #}

{% if libraries.enabled|default(true) or includes.enabled|default(true) or virtual  %}
if (NOT TARGET {{ name }})
  add_library({{ name }} INTERFACE IMPORTED)
{% if includes.enabled|default(true) %}
  target_include_directories({{ name }} INTERFACE {{ '${' }}{{ includes_variable }}{{ '}'}})
{% endif %} {# if includes.enabled|default(true) #}
{% if libraries.enabled|default(true) %}
  target_link_libraries({{ name }} INTERFACE {{ '${' }}{{ libraries_variable }}{{ '}'}})
{% endif %} {# if libraries.enabled|default(true) #}
{% if compile_definitions.names %}
  target_compile_definitions({{ name }} INTERFACE
{%- for option in compile_definitions.names %}  
    {{ option }}
{% endfor %} {# for option in compile_definitions.names #}
  )
{% endif %} {# if compile_definitions.names #}
endif(NOT TARGET {{ name }})
{% endif %}
